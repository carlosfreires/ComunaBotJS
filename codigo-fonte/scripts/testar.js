/**
 * Script de testes automatizados para o Chatbot.
 * 
 * Este m√≥dulo importa o chatbot principal e define cen√°rios de teste para verificar se
 * as respostas est√£o de acordo com o esperado. Cada cen√°rio inclui:
 * - Descri√ß√£o do teste.
 * - Entrada (mensagem do usu√°rio).
 * - Express√£o regular com o padr√£o esperado na resposta.
 *
 * Ap√≥s a execu√ß√£o, o script gera um relat√≥rio detalhado no console, incluindo m√©tricas de
 * testes aprovados, reprovados e erros, garantindo a integra√ß√£o e a consist√™ncia com o restante
 * do projeto.
 */

const chatbot = require('../nucleo/chatbot'); // Importa o m√≥dulo central do Chatbot

class Testador {
  constructor() {
    // Define os cen√°rios de teste com descri√ß√£o, entrada e padr√£o esperado (express√£o regular)
    this.cenarios = [
      {
        descricao: 'Teste de Sauda√ß√£o B√°sica',
        entrada: 'ol√°',
        esperado: /Ol√°|Oi/
      },
      {
        descricao: 'Teste de Despedida',
        entrada: 'tchau',
        esperado: /At√© logo|Volte sempre/
      }
    ];
  }

  /**
   * Executa os cen√°rios de teste definidos.
   * 
   * Para cada cen√°rio, o m√©todo:
   * - Registra o tempo de in√≠cio.
   * - Envia a entrada para o chatbot (usando o m√©todo processarMensagem).
   * - Mede a dura√ß√£o da execu√ß√£o.
   * - Verifica se a resposta corresponde ao padr√£o esperado.
   * - Armazena o resultado (incluindo status, entrada, resposta, dura√ß√£o e erros).
   * - Por fim, gera um relat√≥rio detalhado com os resultados.
   *
   * @returns {Promise<void>} - Promise que resolve ap√≥s a execu√ß√£o de todos os testes.
   */
  async executarTestes() {
    const resultados = []; // Array para armazenar os resultados de cada teste
    
    // Itera sobre cada cen√°rio de teste definido
    for (const cenario of this.cenarios) {
      const inicio = Date.now(); // Registra o in√≠cio do teste
      try {
        // Chama o m√©todo processarMensagem do chatbot com a entrada definida no cen√°rio
        const resposta = await chatbot.processarMensagem(cenario.entrada);
        const duracao = Date.now() - inicio; // Calcula a dura√ß√£o do teste em milissegundos
        
        // Verifica se a resposta obtida corresponde ao padr√£o esperado (utilizando RegExp)
        const sucesso = cenario.esperado.test(resposta);
        
        // Armazena o resultado do teste com status baseado na verifica√ß√£o
        resultados.push({
          cenario: cenario.descricao,
          status: sucesso ? 'APROVADO' : 'REPROVADO',
          entrada: cenario.entrada,
          resposta,
          duracao: `${duracao}ms`,
          erro: null
        });
        
      } catch (erro) {
        // Em caso de erro durante a execu√ß√£o do teste, armazena o resultado com status "ERRO"
        resultados.push({
          cenario: cenario.descricao,
          status: 'ERRO',
          entrada: cenario.entrada,
          resposta: null,
          duracao: null,
          erro: erro.message
        });
      }
    }
    
    // Ap√≥s executar todos os testes, gera o relat√≥rio com os resultados coletados
    this.gerarRelatorio(resultados);
  }

  /**
   * Gera um relat√≥rio detalhado dos testes executados.
   *
   * O relat√≥rio inclui:
   * - N√∫mero do teste e descri√ß√£o do cen√°rio.
   * - Entrada enviada e resposta recebida.
   * - Tempo de execu√ß√£o e status do teste.
   * - Caso ocorra, os erros s√£o destacados.
   * - Ao final, s√£o exibidas m√©tricas gerais dos testes (aprovados, reprovados e erros).
   *
   * @param {Array<Object>} resultados - Array com os resultados dos testes.
   */
  gerarRelatorio(resultados) {
    resultados.forEach((teste, index) => {
      // Constr√≥i a mensagem de relat√≥rio para cada teste, com detalhes formatados
      const mensagem = [
        `üè∑Ô∏è Teste #${index + 1}: ${teste.cenario}`,
        `üì§ Entrada: ${teste.entrada}`,
        `üì• Resposta: ${teste.resposta || 'N/A'}`, 
        `‚è±Ô∏è Tempo: ${teste.duracao || 'N/A'}`,
        `‚úÖ Status: ${teste.status}`,
        ...(teste.erro ? [`‚ùó Erro: ${teste.erro}`] : [])
      ].join('\n');

      // Exibe o relat√≥rio do teste no console
      console.log(mensagem);
      console.log('‚îÄ'.repeat(80)); // Linha separadora para melhor visualiza√ß√£o
    });
    
    // Calcula as m√©tricas gerais dos testes
    const metricas = {
      total: resultados.length,
      aprovados: resultados.filter(t => t.status === 'APROVADO').length,
      reprovados: resultados.filter(t => t.status === 'REPROVADO').length,
      erros: resultados.filter(t => t.status === 'ERRO').length
    };
    
    // Exibe as m√©tricas gerais no console
    console.log('üìä M√©tricas Gerais:');
    console.log(`‚úÖ Aprovados: ${metricas.aprovados}`);
    console.log(`‚ùå Reprovados: ${metricas.reprovados}`);
    console.log(`‚ö†Ô∏è Erros: ${metricas.erros}`);
    console.log('‚ïê'.repeat(80));
  }
}

// Instancia a classe Testador e executa os testes
new Testador().executarTestes();
